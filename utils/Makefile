#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2012/04/25]
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-haiku i386-netbsd i386-solaris i386-qnx i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian i386-nativent i386-iphonesim m68k-linux m68k-freebsd m68k-netbsd m68k-amiga m68k-atari m68k-openbsd m68k-palmos m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macos powerpc-darwin powerpc-morphos powerpc-embedded powerpc-wii powerpc-aix sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-netbsd x86_64-solaris x86_64-openbsd x86_64-darwin x86_64-win64 x86_64-embedded arm-linux arm-palmos arm-darwin arm-wince arm-gba arm-nds arm-embedded arm-symbian powerpc64-linux powerpc64-darwin powerpc64-embedded powerpc64-aix avr-embedded armeb-linux armeb-embedded mips-linux mipsel-linux
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx haiku aix
LIMIT83fs = go32v2 os2 emx watcom
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifeq ($(FULL_TARGET),arm-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
ifeq ($(OS_SOURCE),darwin)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifndef DARWIN2DARWIN
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
override PACKAGE_NAME=utils
override PACKAGE_VERSION=2.7.1
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  rmwait
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpmc fpcres rmwait instantfpc importtl
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpmc fpcres rmwait
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres fpcreslipo instantfpc
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpmc fpcres rmwait
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres rmwait instantfpc
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres fpcreslipo instantfpc
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres fpcreslipo instantfpc
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres fpcreslipo instantfpc
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpmc fpcres rmwait instantfpc importtl
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),arm-darwin)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres fpcreslipo instantfpc
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres rmwait instantfpc
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres fpcreslipo instantfpc
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_DIRS+=fppkg fpcm tply h2pas fprcp dxegen fpdoc fpcmkcfg  fpcres instantfpc
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),arm-darwin)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_PROGRAMS+=ppdep ptop rstconv data2inc delp bin2obj postw32 rmcvsdir  grab_vcsa
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-darwin)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_RSTS+=rstconv
endif
ifeq ($(FULL_TARGET),i386-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-win32)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-os2)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-beos)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-haiku)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-solaris)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-qnx)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-netware)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-darwin)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-emx)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-watcom)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-wince)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-symbian)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-nativent)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-atari)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),sparc-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-palmos)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-darwin)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-wince)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-gba)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-nds)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),arm-symbian)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),avr-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),armeb-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),mips-linux)
override CLEAN_UNITS+=ptopu
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override CLEAN_UNITS+=ptopu
endif
override INSTALL_FPCPACKAGE=y
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aix)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=aix
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
override REQUIRE_PACKAGES=rtl fcl-base paszlib hash
ifeq ($(FULL_TARGET),i386-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-win32)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-os2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-beos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-netware)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_UNIVINT=1
endif
ifeq ($(FULL_TARGET),i386-emx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_UNIVINT=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_UNIVINT=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_UNIVINT=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_UNIVINT=1
endif
ifeq ($(FULL_TARGET),arm-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-gba)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-nds)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_UNIVINT=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),mips-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifdef REQUIRE_PACKAGES_RTL
PACKAGEDIR_RTL:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /rtl/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_RTL),)
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)),)
UNITDIR_RTL=$(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)
else
UNITDIR_RTL=$(PACKAGEDIR_RTL)
endif
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_RTL)/$(OS_TARGET) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE)
endif
else
PACKAGEDIR_RTL=
UNITDIR_RTL:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /rtl/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_RTL),)
UNITDIR_RTL:=$(firstword $(UNITDIR_RTL))
else
UNITDIR_RTL=
endif
endif
ifdef UNITDIR_RTL
override COMPILER_UNITDIR+=$(UNITDIR_RTL)
endif
ifdef UNITDIR_FPMAKE_RTL
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_RTL)
endif
endif
ifdef REQUIRE_PACKAGES_PASZLIB
PACKAGEDIR_PASZLIB:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /paszlib/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_PASZLIB),)
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units/$(TARGETSUFFIX)),)
UNITDIR_PASZLIB=$(PACKAGEDIR_PASZLIB)/units/$(TARGETSUFFIX)
else
UNITDIR_PASZLIB=$(PACKAGEDIR_PASZLIB)
endif
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_PASZLIB)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_PASZLIB) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_PASZLIB)/$(FPCMADE)
endif
else
PACKAGEDIR_PASZLIB=
UNITDIR_PASZLIB:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /paszlib/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_PASZLIB),)
UNITDIR_PASZLIB:=$(firstword $(UNITDIR_PASZLIB))
else
UNITDIR_PASZLIB=
endif
endif
ifdef UNITDIR_PASZLIB
override COMPILER_UNITDIR+=$(UNITDIR_PASZLIB)
endif
ifdef UNITDIR_FPMAKE_PASZLIB
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_PASZLIB)
endif
endif
ifdef REQUIRE_PACKAGES_FCL-PROCESS
PACKAGEDIR_FCL-PROCESS:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fcl-process/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FCL-PROCESS),)
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units/$(TARGETSUFFIX)),)
UNITDIR_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units/$(TARGETSUFFIX)
else
UNITDIR_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)
endif
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FCL-PROCESS)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FCL-PROCESS) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FCL-PROCESS)/$(FPCMADE)
endif
else
PACKAGEDIR_FCL-PROCESS=
UNITDIR_FCL-PROCESS:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fcl-process/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FCL-PROCESS),)
UNITDIR_FCL-PROCESS:=$(firstword $(UNITDIR_FCL-PROCESS))
else
UNITDIR_FCL-PROCESS=
endif
endif
ifdef UNITDIR_FCL-PROCESS
override COMPILER_UNITDIR+=$(UNITDIR_FCL-PROCESS)
endif
ifdef UNITDIR_FPMAKE_FCL-PROCESS
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FCL-PROCESS)
endif
endif
ifdef REQUIRE_PACKAGES_HASH
PACKAGEDIR_HASH:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /hash/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_HASH),)
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units/$(TARGETSUFFIX)),)
UNITDIR_HASH=$(PACKAGEDIR_HASH)/units/$(TARGETSUFFIX)
else
UNITDIR_HASH=$(PACKAGEDIR_HASH)
endif
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_HASH)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_HASH) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_HASH)/$(FPCMADE)
endif
else
PACKAGEDIR_HASH=
UNITDIR_HASH:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /hash/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_HASH),)
UNITDIR_HASH:=$(firstword $(UNITDIR_HASH))
else
UNITDIR_HASH=
endif
endif
ifdef UNITDIR_HASH
override COMPILER_UNITDIR+=$(UNITDIR_HASH)
endif
ifdef UNITDIR_FPMAKE_HASH
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_HASH)
endif
endif
ifdef REQUIRE_PACKAGES_FPMKUNIT
PACKAGEDIR_FPMKUNIT:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FPMKUNIT),)
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units/$(TARGETSUFFIX)),)
UNITDIR_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units/$(TARGETSUFFIX)
else
UNITDIR_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)
endif
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FPMKUNIT) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE)
endif
else
PACKAGEDIR_FPMKUNIT=
UNITDIR_FPMKUNIT:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FPMKUNIT),)
UNITDIR_FPMKUNIT:=$(firstword $(UNITDIR_FPMKUNIT))
else
UNITDIR_FPMKUNIT=
endif
endif
ifdef UNITDIR_FPMKUNIT
override COMPILER_UNITDIR+=$(UNITDIR_FPMKUNIT)
endif
ifdef UNITDIR_FPMAKE_FPMKUNIT
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FPMKUNIT)
endif
endif
ifdef REQUIRE_PACKAGES_FCL-BASE
PACKAGEDIR_FCL-BASE:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fcl-base/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FCL-BASE),)
ifneq ($(wildcard $(PACKAGEDIR_FCL-BASE)/units/$(TARGETSUFFIX)),)
UNITDIR_FCL-BASE=$(PACKAGEDIR_FCL-BASE)/units/$(TARGETSUFFIX)
else
UNITDIR_FCL-BASE=$(PACKAGEDIR_FCL-BASE)
endif
ifneq ($(wildcard $(PACKAGEDIR_FCL-BASE)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-BASE=$(PACKAGEDIR_FCL-BASE)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_FCL-BASE)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-BASE=$(PACKAGEDIR_FCL-BASE)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FCL-BASE=$(PACKAGEDIR_FCL-BASE)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FCL-BASE)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FCL-BASE) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FCL-BASE)/$(FPCMADE)
endif
else
PACKAGEDIR_FCL-BASE=
UNITDIR_FCL-BASE:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fcl-base/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FCL-BASE),)
UNITDIR_FCL-BASE:=$(firstword $(UNITDIR_FCL-BASE))
else
UNITDIR_FCL-BASE=
endif
endif
ifdef UNITDIR_FCL-BASE
override COMPILER_UNITDIR+=$(UNITDIR_FCL-BASE)
endif
ifdef UNITDIR_FPMAKE_FCL-BASE
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FCL-BASE)
endif
endif
ifdef REQUIRE_PACKAGES_UNIVINT
PACKAGEDIR_UNIVINT:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /univint/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_UNIVINT),)
ifneq ($(wildcard $(PACKAGEDIR_UNIVINT)/units/$(TARGETSUFFIX)),)
UNITDIR_UNIVINT=$(PACKAGEDIR_UNIVINT)/units/$(TARGETSUFFIX)
else
UNITDIR_UNIVINT=$(PACKAGEDIR_UNIVINT)
endif
ifneq ($(wildcard $(PACKAGEDIR_UNIVINT)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_UNIVINT=$(PACKAGEDIR_UNIVINT)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_UNIVINT)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_UNIVINT=$(PACKAGEDIR_UNIVINT)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_UNIVINT=$(PACKAGEDIR_UNIVINT)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_UNIVINT)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_UNIVINT) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_UNIVINT)/$(FPCMADE)
endif
else
PACKAGEDIR_UNIVINT=
UNITDIR_UNIVINT:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /univint/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_UNIVINT),)
UNITDIR_UNIVINT:=$(firstword $(UNITDIR_UNIVINT))
else
UNITDIR_UNIVINT=
endif
endif
ifdef UNITDIR_UNIVINT
override COMPILER_UNITDIR+=$(UNITDIR_UNIVINT)
endif
ifdef UNITDIR_FPMAKE_UNIVINT
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_UNIVINT)
endif
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-Aas
endif
endif
ifeq ($(findstring 2.0.,$(FPC_VERSION)),)
ifneq ($(findstring $(OS_TARGET),freebsd openbsd netbsd linux solaris),)
ifeq ($(CPU_TARGET),x86_64)
override FPCOPT+=-Cg
endif
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
endif
.PHONY: fpc_exes
ifndef CROSSINSTALL
ifneq ($(TARGET_PROGRAMS),)
override EXEFILES=$(addsuffix $(EXEEXT),$(TARGET_PROGRAMS))
override EXEOFILES:=$(addsuffix $(OEXT),$(TARGET_PROGRAMS)) $(addprefix $(STATICLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_PROGRAMS))) $(addprefix $(IMPORTLIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_PROGRAMS)))
override EXEDBGFILES:=$(addsuffix $(EXEDBGEXT),$(TARGET_PROGRAMS))
override ALLTARGET+=fpc_exes
override INSTALLEXEFILES+=$(EXEFILES)
override CLEANEXEFILES+=$(EXEFILES) $(EXEOFILES)
override CLEANEXEDBGFILES+=$(EXEDBGFILES)
ifeq ($(OS_TARGET),os2)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_PROGRAMS))
endif
ifeq ($(OS_TARGET),emx)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_PROGRAMS))
endif
endif
endif
fpc_exes: $(COMPILER_TARGETDIR) $(COMPILER_UNITTARGETDIR) $(EXEFILES)
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_all fpc_smart fpc_debug fpc_release fpc_shared
$(FPCMADE): $(ALLDEPENDENCIES) $(ALLTARGET)
	@$(ECHOREDIR) Compiled > $(FPCMADE)
fpc_all: $(FPCMADE)
fpc_smart:
	$(MAKE) all LINKSMART=1 CREATESMART=1
fpc_debug:
	$(MAKE) all DEBUG=1
fpc_release:
	$(MAKE) all RELEASE=1
.SUFFIXES: $(EXEEXT) $(PPUEXT) $(OEXT) .pas .lpr .dpr .pp .rc .res
$(COMPILER_UNITTARGETDIR):
	$(MKDIRTREE) $(COMPILER_UNITTARGETDIR)
$(COMPILER_TARGETDIR):
	$(MKDIRTREE) $(COMPILER_TARGETDIR)
%$(PPUEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(PPUEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.lpr
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.dpr
	$(COMPILER) $<
	$(EXECPPAS)
%.res: %.rc
	windres -i $< -o $@
vpath %.pp $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.pas $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.lpr $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.dpr $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.inc $(COMPILER_INCLUDEDIR)
vpath %$(OEXT) $(COMPILER_UNITTARGETDIR)
vpath %$(PPUEXT) $(COMPILER_UNITTARGETDIR)
.PHONY: fpc_shared
override INSTALLTARGET+=fpc_shared_install
ifndef SHARED_LIBVERSION
SHARED_LIBVERSION=$(FPC_VERSION)
endif
ifndef SHARED_LIBNAME
SHARED_LIBNAME=$(PACKAGE_NAME)
endif
ifndef SHARED_FULLNAME
SHARED_FULLNAME=$(SHAREDLIBPREFIX)$(SHARED_LIBNAME)-$(SHARED_LIBVERSION)$(SHAREDLIBEXT)
endif
ifndef SHARED_LIBUNITS
SHARED_LIBUNITS:=$(TARGET_UNITS) $(TARGET_IMPLICITUNITS)
override SHARED_LIBUNITS:=$(filter-out $(INSTALL_BUILDUNIT),$(SHARED_LIBUNITS))
endif
fpc_shared:
ifdef HASSHAREDLIB
	$(MAKE) all CREATESHARED=1 LINKSHARED=1 CREATESMART=1
ifneq ($(SHARED_BUILD),n)
	$(PPUMOVE) -q $(SHARED_LIBUNITS) -i$(COMPILER_UNITTARGETDIR) -o$(SHARED_FULLNAME) -d$(COMPILER_UNITTARGETDIR)
endif
else
	@$(ECHO) Shared Libraries not supported
endif
fpc_shared_install:
ifneq ($(SHARED_BUILD),n)
ifneq ($(SHARED_LIBUNITS),)
ifneq ($(wildcard $(COMPILER_UNITTARGETDIR)/$(SHARED_FULLNAME)),)
	$(INSTALL) $(COMPILER_UNITTARGETDIR)/$(SHARED_FULLNAME) $(INSTALL_SHAREDDIR)
endif
endif
endif
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALL_BUILDUNIT
override INSTALLPPUFILES:=$(filter-out $(INSTALL_BUILDUNIT)$(PPUEXT),$(INSTALLPPUFILES))
endif
ifdef INSTALLPPUFILES
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
ifneq ($(UNITTARGETDIRPREFIX),)
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPUFILES)))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPULINKFILES))))
endif
override INSTALL_CREATEPACKAGEFPC=1
endif
ifdef INSTALLEXEFILES
ifneq ($(TARGETDIRPREFIX),)
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(notdir $(INSTALLEXEFILES)))
endif
endif
fpc_install: all $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALL_CREATEPACKAGEFPC
ifdef FPCMAKE
ifdef PACKAGE_VERSION
ifneq ($(wildcard Makefile.fpc),)
	$(FPCMAKE) -p -T$(CPU_TARGET)-$(OS_TARGET) Makefile.fpc
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) Package.fpc $(INSTALL_UNITDIR)
endif
endif
endif
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR)/* $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef HASEXAMPLES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
ifdef EXAMPLESOURCEFILES
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
.PHONY: fpc_distinstall
fpc_distinstall: install exampleinstall
.PHONY: fpc_zipinstall fpc_zipsourceinstall fpc_zipexampleinstall
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/../fpc-pack
else
PACKDIR=/tmp/fpc-pack
endif
endif
ifndef ZIPNAME
ifdef DIST_ZIPNAME
ZIPNAME=$(DIST_ZIPNAME)
else
ZIPNAME=$(PACKAGE_NAME)
endif
endif
ifndef FULLZIPNAME
FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)$(ZIPNAME)$(ZIPSUFFIX)
endif
ifndef ZIPTARGET
ifdef DIST_ZIPTARGET
ZIPTARGET=DIST_ZIPTARGET
else
ZIPTARGET=install
endif
endif
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif
ifndef inUnix
USEZIPWRAPPER=1
endif
ifdef USEZIPWRAPPER
ZIPPATHSEP=$(PATHSEP)
ZIPWRAPPER=$(subst /,$(PATHSEP),$(DIST_DESTDIR)/fpczip$(SRCBATCHEXT))
else
ZIPPATHSEP=/
endif
ZIPCMD_CDPACK:=cd $(subst /,$(ZIPPATHSEP),$(PACKDIR))
ZIPCMD_CDBASE:=cd $(subst /,$(ZIPPATHSEP),$(BASEDIR))
ifdef USETAR
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(TAREXT)
ZIPCMD_ZIP:=$(TARPROG) c$(TAROPT)f $(ZIPDESTFILE) *
else
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(ZIPEXT)
ZIPCMD_ZIP:=$(subst /,$(ZIPPATHSEP),$(ZIPPROG)) -Dr $(ZIPOPT) $(ZIPDESTFILE) *
endif
fpc_zipinstall:
	$(MAKE) $(ZIPTARGET) INSTALL_PREFIX=$(PACKDIR) ZIPINSTALL=1
	$(MKDIR) $(DIST_DESTDIR)
	$(DEL) $(ZIPDESTFILE)
ifdef USEZIPWRAPPER
ifneq ($(ECHOREDIR),echo)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDPACK))" > $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_ZIP))" >> $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDBASE))" >> $(ZIPWRAPPER)
else
	echo $(ZIPCMD_CDPACK) > $(ZIPWRAPPER)
	echo $(ZIPCMD_ZIP) >> $(ZIPWRAPPER)
	echo $(ZIPCMD_CDBASE) >> $(ZIPWRAPPER)
endif
ifdef inUnix
	/bin/sh $(ZIPWRAPPER)
else
ifdef RUNBATCH
	$(RUNBATCH) $(ZIPWRAPPER)
else
	$(ZIPWRAPPER)
endif
endif
	$(DEL) $(ZIPWRAPPER)
else
	$(ZIPCMD_CDPACK) ; $(ZIPCMD_ZIP) ; $(ZIPCMD_CDBASE)
endif
	$(DELTREE) $(PACKDIR)
fpc_zipsourceinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall ZIPSUFFIX=$(ZIPSOURCESUFFIX)
fpc_zipexampleinstall:
ifdef HASEXAMPLES
	$(MAKE) fpc_zipinstall ZIPTARGET=exampleinstall ZIPSUFFIX=$(ZIPEXAMPLESUFFIX)
endif
fpc_zipdistinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=distinstall
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_RMWAIT=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPMC=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_RMWAIT=1
TARGET_DIRS_INSTANTFPC=1
TARGET_DIRS_IMPORTTL=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPMC=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_RMWAIT=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_FPCRESLIPO=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPMC=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_RMWAIT=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_RMWAIT=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_FPCRESLIPO=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_FPCRESLIPO=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_FPCRESLIPO=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPMC=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_RMWAIT=1
TARGET_DIRS_INSTANTFPC=1
TARGET_DIRS_IMPORTTL=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),arm-darwin)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_FPCRESLIPO=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_RMWAIT=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_FPCRESLIPO=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
endif
ifeq ($(FULL_TARGET),mips-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPCM=1
TARGET_DIRS_TPLY=1
TARGET_DIRS_H2PAS=1
TARGET_DIRS_FPRCP=1
TARGET_DIRS_DXEGEN=1
TARGET_DIRS_FPDOC=1
TARGET_DIRS_FPCMKCFG=1
TARGET_DIRS_FPCRES=1
TARGET_DIRS_INSTANTFPC=1
endif
ifdef TARGET_DIRS_FPPKG
fppkg_all:
	$(MAKE) -C fppkg all
fppkg_debug:
	$(MAKE) -C fppkg debug
fppkg_smart:
	$(MAKE) -C fppkg smart
fppkg_release:
	$(MAKE) -C fppkg release
fppkg_units:
	$(MAKE) -C fppkg units
fppkg_examples:
	$(MAKE) -C fppkg examples
fppkg_shared:
	$(MAKE) -C fppkg shared
fppkg_install:
	$(MAKE) -C fppkg install
fppkg_sourceinstall:
	$(MAKE) -C fppkg sourceinstall
fppkg_exampleinstall:
	$(MAKE) -C fppkg exampleinstall
fppkg_distinstall:
	$(MAKE) -C fppkg distinstall
fppkg_zipinstall:
	$(MAKE) -C fppkg zipinstall
fppkg_zipsourceinstall:
	$(MAKE) -C fppkg zipsourceinstall
fppkg_zipexampleinstall:
	$(MAKE) -C fppkg zipexampleinstall
fppkg_zipdistinstall:
	$(MAKE) -C fppkg zipdistinstall
fppkg_clean:
	$(MAKE) -C fppkg clean
fppkg_distclean:
	$(MAKE) -C fppkg distclean
fppkg_cleanall:
	$(MAKE) -C fppkg cleanall
fppkg_info:
	$(MAKE) -C fppkg info
fppkg_makefiles:
	$(MAKE) -C fppkg makefiles
fppkg:
	$(MAKE) -C fppkg all
.PHONY: fppkg_all fppkg_debug fppkg_smart fppkg_release fppkg_units fppkg_examples fppkg_shared fppkg_install fppkg_sourceinstall fppkg_exampleinstall fppkg_distinstall fppkg_zipinstall fppkg_zipsourceinstall fppkg_zipexampleinstall fppkg_zipdistinstall fppkg_clean fppkg_distclean fppkg_cleanall fppkg_info fppkg_makefiles fppkg
endif
ifdef TARGET_DIRS_FPCM
fpcm_all:
	$(MAKE) -C fpcm all
fpcm_debug:
	$(MAKE) -C fpcm debug
fpcm_smart:
	$(MAKE) -C fpcm smart
fpcm_release:
	$(MAKE) -C fpcm release
fpcm_units:
	$(MAKE) -C fpcm units
fpcm_examples:
	$(MAKE) -C fpcm examples
fpcm_shared:
	$(MAKE) -C fpcm shared
fpcm_install:
	$(MAKE) -C fpcm install
fpcm_sourceinstall:
	$(MAKE) -C fpcm sourceinstall
fpcm_exampleinstall:
	$(MAKE) -C fpcm exampleinstall
fpcm_distinstall:
	$(MAKE) -C fpcm distinstall
fpcm_zipinstall:
	$(MAKE) -C fpcm zipinstall
fpcm_zipsourceinstall:
	$(MAKE) -C fpcm zipsourceinstall
fpcm_zipexampleinstall:
	$(MAKE) -C fpcm zipexampleinstall
fpcm_zipdistinstall:
	$(MAKE) -C fpcm zipdistinstall
fpcm_clean:
	$(MAKE) -C fpcm clean
fpcm_distclean:
	$(MAKE) -C fpcm distclean
fpcm_cleanall:
	$(MAKE) -C fpcm cleanall
fpcm_info:
	$(MAKE) -C fpcm info
fpcm_makefiles:
	$(MAKE) -C fpcm makefiles
fpcm:
	$(MAKE) -C fpcm all
.PHONY: fpcm_all fpcm_debug fpcm_smart fpcm_release fpcm_units fpcm_examples fpcm_shared fpcm_install fpcm_sourceinstall fpcm_exampleinstall fpcm_distinstall fpcm_zipinstall fpcm_zipsourceinstall fpcm_zipexampleinstall fpcm_zipdistinstall fpcm_clean fpcm_distclean fpcm_cleanall fpcm_info fpcm_makefiles fpcm
endif
ifdef TARGET_DIRS_TPLY
tply_all:
	$(MAKE) -C tply all
tply_debug:
	$(MAKE) -C tply debug
tply_smart:
	$(MAKE) -C tply smart
tply_release:
	$(MAKE) -C tply release
tply_units:
	$(MAKE) -C tply units
tply_examples:
	$(MAKE) -C tply examples
tply_shared:
	$(MAKE) -C tply shared
tply_install:
	$(MAKE) -C tply install
tply_sourceinstall:
	$(MAKE) -C tply sourceinstall
tply_exampleinstall:
	$(MAKE) -C tply exampleinstall
tply_distinstall:
	$(MAKE) -C tply distinstall
tply_zipinstall:
	$(MAKE) -C tply zipinstall
tply_zipsourceinstall:
	$(MAKE) -C tply zipsourceinstall
tply_zipexampleinstall:
	$(MAKE) -C tply zipexampleinstall
tply_zipdistinstall:
	$(MAKE) -C tply zipdistinstall
tply_clean:
	$(MAKE) -C tply clean
tply_distclean:
	$(MAKE) -C tply distclean
tply_cleanall:
	$(MAKE) -C tply cleanall
tply_info:
	$(MAKE) -C tply info
tply_makefiles:
	$(MAKE) -C tply makefiles
tply:
	$(MAKE) -C tply all
.PHONY: tply_all tply_debug tply_smart tply_release tply_units tply_examples tply_shared tply_install tply_sourceinstall tply_exampleinstall tply_distinstall tply_zipinstall tply_zipsourceinstall tply_zipexampleinstall tply_zipdistinstall tply_clean tply_distclean tply_cleanall tply_info tply_makefiles tply
endif
ifdef TARGET_DIRS_H2PAS
h2pas_all:
	$(MAKE) -C h2pas all
h2pas_debug:
	$(MAKE) -C h2pas debug
h2pas_smart:
	$(MAKE) -C h2pas smart
h2pas_release:
	$(MAKE) -C h2pas release
h2pas_units:
	$(MAKE) -C h2pas units
h2pas_examples:
	$(MAKE) -C h2pas examples
h2pas_shared:
	$(MAKE) -C h2pas shared
h2pas_install:
	$(MAKE) -C h2pas install
h2pas_sourceinstall:
	$(MAKE) -C h2pas sourceinstall
h2pas_exampleinstall:
	$(MAKE) -C h2pas exampleinstall
h2pas_distinstall:
	$(MAKE) -C h2pas distinstall
h2pas_zipinstall:
	$(MAKE) -C h2pas zipinstall
h2pas_zipsourceinstall:
	$(MAKE) -C h2pas zipsourceinstall
h2pas_zipexampleinstall:
	$(MAKE) -C h2pas zipexampleinstall
h2pas_zipdistinstall:
	$(MAKE) -C h2pas zipdistinstall
h2pas_clean:
	$(MAKE) -C h2pas clean
h2pas_distclean:
	$(MAKE) -C h2pas distclean
h2pas_cleanall:
	$(MAKE) -C h2pas cleanall
h2pas_info:
	$(MAKE) -C h2pas info
h2pas_makefiles:
	$(MAKE) -C h2pas makefiles
h2pas:
	$(MAKE) -C h2pas all
.PHONY: h2pas_all h2pas_debug h2pas_smart h2pas_release h2pas_units h2pas_examples h2pas_shared h2pas_install h2pas_sourceinstall h2pas_exampleinstall h2pas_distinstall h2pas_zipinstall h2pas_zipsourceinstall h2pas_zipexampleinstall h2pas_zipdistinstall h2pas_clean h2pas_distclean h2pas_cleanall h2pas_info h2pas_makefiles h2pas
endif
ifdef TARGET_DIRS_FPRCP
fprcp_all:
	$(MAKE) -C fprcp all
fprcp_debug:
	$(MAKE) -C fprcp debug
fprcp_smart:
	$(MAKE) -C fprcp smart
fprcp_release:
	$(MAKE) -C fprcp release
fprcp_units:
	$(MAKE) -C fprcp units
fprcp_examples:
	$(MAKE) -C fprcp examples
fprcp_shared:
	$(MAKE) -C fprcp shared
fprcp_install:
	$(MAKE) -C fprcp install
fprcp_sourceinstall:
	$(MAKE) -C fprcp sourceinstall
fprcp_exampleinstall:
	$(MAKE) -C fprcp exampleinstall
fprcp_distinstall:
	$(MAKE) -C fprcp distinstall
fprcp_zipinstall:
	$(MAKE) -C fprcp zipinstall
fprcp_zipsourceinstall:
	$(MAKE) -C fprcp zipsourceinstall
fprcp_zipexampleinstall:
	$(MAKE) -C fprcp zipexampleinstall
fprcp_zipdistinstall:
	$(MAKE) -C fprcp zipdistinstall
fprcp_clean:
	$(MAKE) -C fprcp clean
fprcp_distclean:
	$(MAKE) -C fprcp distclean
fprcp_cleanall:
	$(MAKE) -C fprcp cleanall
fprcp_info:
	$(MAKE) -C fprcp info
fprcp_makefiles:
	$(MAKE) -C fprcp makefiles
fprcp:
	$(MAKE) -C fprcp all
.PHONY: fprcp_all fprcp_debug fprcp_smart fprcp_release fprcp_units fprcp_examples fprcp_shared fprcp_install fprcp_sourceinstall fprcp_exampleinstall fprcp_distinstall fprcp_zipinstall fprcp_zipsourceinstall fprcp_zipexampleinstall fprcp_zipdistinstall fprcp_clean fprcp_distclean fprcp_cleanall fprcp_info fprcp_makefiles fprcp
endif
ifdef TARGET_DIRS_DXEGEN
dxegen_all:
	$(MAKE) -C dxegen all
dxegen_debug:
	$(MAKE) -C dxegen debug
dxegen_smart:
	$(MAKE) -C dxegen smart
dxegen_release:
	$(MAKE) -C dxegen release
dxegen_units:
	$(MAKE) -C dxegen units
dxegen_examples:
	$(MAKE) -C dxegen examples
dxegen_shared:
	$(MAKE) -C dxegen shared
dxegen_install:
	$(MAKE) -C dxegen install
dxegen_sourceinstall:
	$(MAKE) -C dxegen sourceinstall
dxegen_exampleinstall:
	$(MAKE) -C dxegen exampleinstall
dxegen_distinstall:
	$(MAKE) -C dxegen distinstall
dxegen_zipinstall:
	$(MAKE) -C dxegen zipinstall
dxegen_zipsourceinstall:
	$(MAKE) -C dxegen zipsourceinstall
dxegen_zipexampleinstall:
	$(MAKE) -C dxegen zipexampleinstall
dxegen_zipdistinstall:
	$(MAKE) -C dxegen zipdistinstall
dxegen_clean:
	$(MAKE) -C dxegen clean
dxegen_distclean:
	$(MAKE) -C dxegen distclean
dxegen_cleanall:
	$(MAKE) -C dxegen cleanall
dxegen_info:
	$(MAKE) -C dxegen info
dxegen_makefiles:
	$(MAKE) -C dxegen makefiles
dxegen:
	$(MAKE) -C dxegen all
.PHONY: dxegen_all dxegen_debug dxegen_smart dxegen_release dxegen_units dxegen_examples dxegen_shared dxegen_install dxegen_sourceinstall dxegen_exampleinstall dxegen_distinstall dxegen_zipinstall dxegen_zipsourceinstall dxegen_zipexampleinstall dxegen_zipdistinstall dxegen_clean dxegen_distclean dxegen_cleanall dxegen_info dxegen_makefiles dxegen
endif
ifdef TARGET_DIRS_FPDOC
fpdoc_all:
	$(MAKE) -C fpdoc all
fpdoc_debug:
	$(MAKE) -C fpdoc debug
fpdoc_smart:
	$(MAKE) -C fpdoc smart
fpdoc_release:
	$(MAKE) -C fpdoc release
fpdoc_units:
	$(MAKE) -C fpdoc units
fpdoc_examples:
	$(MAKE) -C fpdoc examples
fpdoc_shared:
	$(MAKE) -C fpdoc shared
fpdoc_install:
	$(MAKE) -C fpdoc install
fpdoc_sourceinstall:
	$(MAKE) -C fpdoc sourceinstall
fpdoc_exampleinstall:
	$(MAKE) -C fpdoc exampleinstall
fpdoc_distinstall:
	$(MAKE) -C fpdoc distinstall
fpdoc_zipinstall:
	$(MAKE) -C fpdoc zipinstall
fpdoc_zipsourceinstall:
	$(MAKE) -C fpdoc zipsourceinstall
fpdoc_zipexampleinstall:
	$(MAKE) -C fpdoc zipexampleinstall
fpdoc_zipdistinstall:
	$(MAKE) -C fpdoc zipdistinstall
fpdoc_clean:
	$(MAKE) -C fpdoc clean
fpdoc_distclean:
	$(MAKE) -C fpdoc distclean
fpdoc_cleanall:
	$(MAKE) -C fpdoc cleanall
fpdoc_info:
	$(MAKE) -C fpdoc info
fpdoc_makefiles:
	$(MAKE) -C fpdoc makefiles
fpdoc:
	$(MAKE) -C fpdoc all
.PHONY: fpdoc_all fpdoc_debug fpdoc_smart fpdoc_release fpdoc_units fpdoc_examples fpdoc_shared fpdoc_install fpdoc_sourceinstall fpdoc_exampleinstall fpdoc_distinstall fpdoc_zipinstall fpdoc_zipsourceinstall fpdoc_zipexampleinstall fpdoc_zipdistinstall fpdoc_clean fpdoc_distclean fpdoc_cleanall fpdoc_info fpdoc_makefiles fpdoc
endif
ifdef TARGET_DIRS_FPCMKCFG
fpcmkcfg_all:
	$(MAKE) -C fpcmkcfg all
fpcmkcfg_debug:
	$(MAKE) -C fpcmkcfg debug
fpcmkcfg_smart:
	$(MAKE) -C fpcmkcfg smart
fpcmkcfg_release:
	$(MAKE) -C fpcmkcfg release
fpcmkcfg_units:
	$(MAKE) -C fpcmkcfg units
fpcmkcfg_examples:
	$(MAKE) -C fpcmkcfg examples
fpcmkcfg_shared:
	$(MAKE) -C fpcmkcfg shared
fpcmkcfg_install:
	$(MAKE) -C fpcmkcfg install
fpcmkcfg_sourceinstall:
	$(MAKE) -C fpcmkcfg sourceinstall
fpcmkcfg_exampleinstall:
	$(MAKE) -C fpcmkcfg exampleinstall
fpcmkcfg_distinstall:
	$(MAKE) -C fpcmkcfg distinstall
fpcmkcfg_zipinstall:
	$(MAKE) -C fpcmkcfg zipinstall
fpcmkcfg_zipsourceinstall:
	$(MAKE) -C fpcmkcfg zipsourceinstall
fpcmkcfg_zipexampleinstall:
	$(MAKE) -C fpcmkcfg zipexampleinstall
fpcmkcfg_zipdistinstall:
	$(MAKE) -C fpcmkcfg zipdistinstall
fpcmkcfg_clean:
	$(MAKE) -C fpcmkcfg clean
fpcmkcfg_distclean:
	$(MAKE) -C fpcmkcfg distclean
fpcmkcfg_cleanall:
	$(MAKE) -C fpcmkcfg cleanall
fpcmkcfg_info:
	$(MAKE) -C fpcmkcfg info
fpcmkcfg_makefiles:
	$(MAKE) -C fpcmkcfg makefiles
fpcmkcfg:
	$(MAKE) -C fpcmkcfg all
.PHONY: fpcmkcfg_all fpcmkcfg_debug fpcmkcfg_smart fpcmkcfg_release fpcmkcfg_units fpcmkcfg_examples fpcmkcfg_shared fpcmkcfg_install fpcmkcfg_sourceinstall fpcmkcfg_exampleinstall fpcmkcfg_distinstall fpcmkcfg_zipinstall fpcmkcfg_zipsourceinstall fpcmkcfg_zipexampleinstall fpcmkcfg_zipdistinstall fpcmkcfg_clean fpcmkcfg_distclean fpcmkcfg_cleanall fpcmkcfg_info fpcmkcfg_makefiles fpcmkcfg
endif
ifdef TARGET_DIRS_FPCRES
fpcres_all:
	$(MAKE) -C fpcres all
fpcres_debug:
	$(MAKE) -C fpcres debug
fpcres_smart:
	$(MAKE) -C fpcres smart
fpcres_release:
	$(MAKE) -C fpcres release
fpcres_units:
	$(MAKE) -C fpcres units
fpcres_examples:
	$(MAKE) -C fpcres examples
fpcres_shared:
	$(MAKE) -C fpcres shared
fpcres_install:
	$(MAKE) -C fpcres install
fpcres_sourceinstall:
	$(MAKE) -C fpcres sourceinstall
fpcres_exampleinstall:
	$(MAKE) -C fpcres exampleinstall
fpcres_distinstall:
	$(MAKE) -C fpcres distinstall
fpcres_zipinstall:
	$(MAKE) -C fpcres zipinstall
fpcres_zipsourceinstall:
	$(MAKE) -C fpcres zipsourceinstall
fpcres_zipexampleinstall:
	$(MAKE) -C fpcres zipexampleinstall
fpcres_zipdistinstall:
	$(MAKE) -C fpcres zipdistinstall
fpcres_clean:
	$(MAKE) -C fpcres clean
fpcres_distclean:
	$(MAKE) -C fpcres distclean
fpcres_cleanall:
	$(MAKE) -C fpcres cleanall
fpcres_info:
	$(MAKE) -C fpcres info
fpcres_makefiles:
	$(MAKE) -C fpcres makefiles
fpcres:
	$(MAKE) -C fpcres all
.PHONY: fpcres_all fpcres_debug fpcres_smart fpcres_release fpcres_units fpcres_examples fpcres_shared fpcres_install fpcres_sourceinstall fpcres_exampleinstall fpcres_distinstall fpcres_zipinstall fpcres_zipsourceinstall fpcres_zipexampleinstall fpcres_zipdistinstall fpcres_clean fpcres_distclean fpcres_cleanall fpcres_info fpcres_makefiles fpcres
endif
ifdef TARGET_DIRS_INSTANTFPC
instantfpc_all:
	$(MAKE) -C instantfpc all
instantfpc_debug:
	$(MAKE) -C instantfpc debug
instantfpc_smart:
	$(MAKE) -C instantfpc smart
instantfpc_release:
	$(MAKE) -C instantfpc release
instantfpc_units:
	$(MAKE) -C instantfpc units
instantfpc_examples:
	$(MAKE) -C instantfpc examples
instantfpc_shared:
	$(MAKE) -C instantfpc shared
instantfpc_install:
	$(MAKE) -C instantfpc install
instantfpc_sourceinstall:
	$(MAKE) -C instantfpc sourceinstall
instantfpc_exampleinstall:
	$(MAKE) -C instantfpc exampleinstall
instantfpc_distinstall:
	$(MAKE) -C instantfpc distinstall
instantfpc_zipinstall:
	$(MAKE) -C instantfpc zipinstall
instantfpc_zipsourceinstall:
	$(MAKE) -C instantfpc zipsourceinstall
instantfpc_zipexampleinstall:
	$(MAKE) -C instantfpc zipexampleinstall
instantfpc_zipdistinstall:
	$(MAKE) -C instantfpc zipdistinstall
instantfpc_clean:
	$(MAKE) -C instantfpc clean
instantfpc_distclean:
	$(MAKE) -C instantfpc distclean
instantfpc_cleanall:
	$(MAKE) -C instantfpc cleanall
instantfpc_info:
	$(MAKE) -C instantfpc info
instantfpc_makefiles:
	$(MAKE) -C instantfpc makefiles
instantfpc:
	$(MAKE) -C instantfpc all
.PHONY: instantfpc_all instantfpc_debug instantfpc_smart instantfpc_release instantfpc_units instantfpc_examples instantfpc_shared instantfpc_install instantfpc_sourceinstall instantfpc_exampleinstall instantfpc_distinstall instantfpc_zipinstall instantfpc_zipsourceinstall instantfpc_zipexampleinstall instantfpc_zipdistinstall instantfpc_clean instantfpc_distclean instantfpc_cleanall instantfpc_info instantfpc_makefiles instantfpc
endif
ifdef TARGET_DIRS_RMWAIT
rmwait_all:
	$(MAKE) -C rmwait all
rmwait_debug:
	$(MAKE) -C rmwait debug
rmwait_smart:
	$(MAKE) -C rmwait smart
rmwait_release:
	$(MAKE) -C rmwait release
rmwait_units:
	$(MAKE) -C rmwait units
rmwait_examples:
	$(MAKE) -C rmwait examples
rmwait_shared:
	$(MAKE) -C rmwait shared
rmwait_install:
	$(MAKE) -C rmwait install
rmwait_sourceinstall:
	$(MAKE) -C rmwait sourceinstall
rmwait_exampleinstall:
	$(MAKE) -C rmwait exampleinstall
rmwait_distinstall:
	$(MAKE) -C rmwait distinstall
rmwait_zipinstall:
	$(MAKE) -C rmwait zipinstall
rmwait_zipsourceinstall:
	$(MAKE) -C rmwait zipsourceinstall
rmwait_zipexampleinstall:
	$(MAKE) -C rmwait zipexampleinstall
rmwait_zipdistinstall:
	$(MAKE) -C rmwait zipdistinstall
rmwait_clean:
	$(MAKE) -C rmwait clean
rmwait_distclean:
	$(MAKE) -C rmwait distclean
rmwait_cleanall:
	$(MAKE) -C rmwait cleanall
rmwait_info:
	$(MAKE) -C rmwait info
rmwait_makefiles:
	$(MAKE) -C rmwait makefiles
rmwait:
	$(MAKE) -C rmwait all
.PHONY: rmwait_all rmwait_debug rmwait_smart rmwait_release rmwait_units rmwait_examples rmwait_shared rmwait_install rmwait_sourceinstall rmwait_exampleinstall rmwait_distinstall rmwait_zipinstall rmwait_zipsourceinstall rmwait_zipexampleinstall rmwait_zipdistinstall rmwait_clean rmwait_distclean rmwait_cleanall rmwait_info rmwait_makefiles rmwait
endif
ifdef TARGET_DIRS_FPMC
fpmc_all:
	$(MAKE) -C fpmc all
fpmc_debug:
	$(MAKE) -C fpmc debug
fpmc_smart:
	$(MAKE) -C fpmc smart
fpmc_release:
	$(MAKE) -C fpmc release
fpmc_units:
	$(MAKE) -C fpmc units
fpmc_examples:
	$(MAKE) -C fpmc examples
fpmc_shared:
	$(MAKE) -C fpmc shared
fpmc_install:
	$(MAKE) -C fpmc install
fpmc_sourceinstall:
	$(MAKE) -C fpmc sourceinstall
fpmc_exampleinstall:
	$(MAKE) -C fpmc exampleinstall
fpmc_distinstall:
	$(MAKE) -C fpmc distinstall
fpmc_zipinstall:
	$(MAKE) -C fpmc zipinstall
fpmc_zipsourceinstall:
	$(MAKE) -C fpmc zipsourceinstall
fpmc_zipexampleinstall:
	$(MAKE) -C fpmc zipexampleinstall
fpmc_zipdistinstall:
	$(MAKE) -C fpmc zipdistinstall
fpmc_clean:
	$(MAKE) -C fpmc clean
fpmc_distclean:
	$(MAKE) -C fpmc distclean
fpmc_cleanall:
	$(MAKE) -C fpmc cleanall
fpmc_info:
	$(MAKE) -C fpmc info
fpmc_makefiles:
	$(MAKE) -C fpmc makefiles
fpmc:
	$(MAKE) -C fpmc all
.PHONY: fpmc_all fpmc_debug fpmc_smart fpmc_release fpmc_units fpmc_examples fpmc_shared fpmc_install fpmc_sourceinstall fpmc_exampleinstall fpmc_distinstall fpmc_zipinstall fpmc_zipsourceinstall fpmc_zipexampleinstall fpmc_zipdistinstall fpmc_clean fpmc_distclean fpmc_cleanall fpmc_info fpmc_makefiles fpmc
endif
ifdef TARGET_DIRS_IMPORTTL
importtl_all:
	$(MAKE) -C importtl all
importtl_debug:
	$(MAKE) -C importtl debug
importtl_smart:
	$(MAKE) -C importtl smart
importtl_release:
	$(MAKE) -C importtl release
importtl_units:
	$(MAKE) -C importtl units
importtl_examples:
	$(MAKE) -C importtl examples
importtl_shared:
	$(MAKE) -C importtl shared
importtl_install:
	$(MAKE) -C importtl install
importtl_sourceinstall:
	$(MAKE) -C importtl sourceinstall
importtl_exampleinstall:
	$(MAKE) -C importtl exampleinstall
importtl_distinstall:
	$(MAKE) -C importtl distinstall
importtl_zipinstall:
	$(MAKE) -C importtl zipinstall
importtl_zipsourceinstall:
	$(MAKE) -C importtl zipsourceinstall
importtl_zipexampleinstall:
	$(MAKE) -C importtl zipexampleinstall
importtl_zipdistinstall:
	$(MAKE) -C importtl zipdistinstall
importtl_clean:
	$(MAKE) -C importtl clean
importtl_distclean:
	$(MAKE) -C importtl distclean
importtl_cleanall:
	$(MAKE) -C importtl cleanall
importtl_info:
	$(MAKE) -C importtl info
importtl_makefiles:
	$(MAKE) -C importtl makefiles
importtl:
	$(MAKE) -C importtl all
.PHONY: importtl_all importtl_debug importtl_smart importtl_release importtl_units importtl_examples importtl_shared importtl_install importtl_sourceinstall importtl_exampleinstall importtl_distinstall importtl_zipinstall importtl_zipsourceinstall importtl_zipexampleinstall importtl_zipdistinstall importtl_clean importtl_distclean importtl_cleanall importtl_info importtl_makefiles importtl
endif
ifdef TARGET_DIRS_FPCRESLIPO
fpcreslipo_all:
	$(MAKE) -C fpcreslipo all
fpcreslipo_debug:
	$(MAKE) -C fpcreslipo debug
fpcreslipo_smart:
	$(MAKE) -C fpcreslipo smart
fpcreslipo_release:
	$(MAKE) -C fpcreslipo release
fpcreslipo_units:
	$(MAKE) -C fpcreslipo units
fpcreslipo_examples:
	$(MAKE) -C fpcreslipo examples
fpcreslipo_shared:
	$(MAKE) -C fpcreslipo shared
fpcreslipo_install:
	$(MAKE) -C fpcreslipo install
fpcreslipo_sourceinstall:
	$(MAKE) -C fpcreslipo sourceinstall
fpcreslipo_exampleinstall:
	$(MAKE) -C fpcreslipo exampleinstall
fpcreslipo_distinstall:
	$(MAKE) -C fpcreslipo distinstall
fpcreslipo_zipinstall:
	$(MAKE) -C fpcreslipo zipinstall
fpcreslipo_zipsourceinstall:
	$(MAKE) -C fpcreslipo zipsourceinstall
fpcreslipo_zipexampleinstall:
	$(MAKE) -C fpcreslipo zipexampleinstall
fpcreslipo_zipdistinstall:
	$(MAKE) -C fpcreslipo zipdistinstall
fpcreslipo_clean:
	$(MAKE) -C fpcreslipo clean
fpcreslipo_distclean:
	$(MAKE) -C fpcreslipo distclean
fpcreslipo_cleanall:
	$(MAKE) -C fpcreslipo cleanall
fpcreslipo_info:
	$(MAKE) -C fpcreslipo info
fpcreslipo_makefiles:
	$(MAKE) -C fpcreslipo makefiles
fpcreslipo:
	$(MAKE) -C fpcreslipo all
.PHONY: fpcreslipo_all fpcreslipo_debug fpcreslipo_smart fpcreslipo_release fpcreslipo_units fpcreslipo_examples fpcreslipo_shared fpcreslipo_install fpcreslipo_sourceinstall fpcreslipo_exampleinstall fpcreslipo_distinstall fpcreslipo_zipinstall fpcreslipo_zipsourceinstall fpcreslipo_zipexampleinstall fpcreslipo_zipdistinstall fpcreslipo_clean fpcreslipo_distclean fpcreslipo_cleanall fpcreslipo_info fpcreslipo_makefiles fpcreslipo
endif
all: fpc_all $(addsuffix _all,$(TARGET_DIRS))
debug: fpc_debug
smart: fpc_smart
release: fpc_release
units: fpc_units $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: fpc_shared
install: fpc_install $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: fpc_sourceinstall
exampleinstall: fpc_exampleinstall $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: fpc_distinstall
zipinstall: fpc_zipinstall
zipsourceinstall: fpc_zipsourceinstall
zipexampleinstall: fpc_zipexampleinstall $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: fpc_zipdistinstall
clean: fpc_clean $(addsuffix _clean,$(TARGET_DIRS))
distclean: fpc_distclean $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: fpc_cleanall $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
ptop$(EXEEXT): ptop.pp ptopu$(PPUEXT)
ptopu$(PPUEXT): ptopu.pp
ppdep$(EXEEXT): ppdep.pp
unexport DATA2INC
.NOTPARALLEL:
